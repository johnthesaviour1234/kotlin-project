name: Code Quality & Performance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for performance monitoring
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  check-projects:
    name: Check Android Projects
    runs-on: ubuntu-latest
    outputs:
      customer_exists: ${{ steps.check.outputs.customer_exists }}
      admin_exists: ${{ steps.check.outputs.admin_exists }}
      delivery_exists: ${{ steps.check.outputs.delivery_exists }}
      any_project_exists: ${{ steps.check.outputs.any_project_exists }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for Android project directories
      id: check
      run: |
        customer_exists="false"
        admin_exists="false"
        delivery_exists="false"
        any_project_exists="false"
        
        if [ -d "GroceryCustomer" ] && [ -f "GroceryCustomer/gradlew" ]; then
          customer_exists="true"
          any_project_exists="true"
        fi
        if [ -d "GroceryAdmin" ] && [ -f "GroceryAdmin/gradlew" ]; then
          admin_exists="true"
          any_project_exists="true"
        fi
        if [ -d "GroceryDelivery" ] && [ -f "GroceryDelivery/gradlew" ]; then
          delivery_exists="true"
          any_project_exists="true"
        fi
        
        echo "customer_exists=$customer_exists" >> $GITHUB_OUTPUT
        echo "admin_exists=$admin_exists" >> $GITHUB_OUTPUT
        echo "delivery_exists=$delivery_exists" >> $GITHUB_OUTPUT
        echo "any_project_exists=$any_project_exists" >> $GITHUB_OUTPUT

  code-formatting:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    needs: check-projects
    if: needs.check-projects.outputs.any_project_exists == 'true'
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permissions
      run: find . -name "gradlew" -exec chmod +x {} \;
      
    - name: Run ktlint formatting check
      run: |
        echo "🎨 Running ktlint formatting checks..."
        
        CUSTOMER_FAILED=0
        ADMIN_FAILED=0
        DELIVERY_FAILED=0
        
        if [ "${{ needs.check-projects.outputs.customer_exists }}" == "true" ]; then
          echo "📱 Customer App:"
          cd GroceryCustomer
          ./gradlew ktlintCheck --continue || CUSTOMER_FAILED=1
          cd ..
        fi
        
        if [ "${{ needs.check-projects.outputs.admin_exists }}" == "true" ]; then
          echo "👨‍💼 Admin App:"
          cd GroceryAdmin
          ./gradlew ktlintCheck --continue || ADMIN_FAILED=1
          cd ..
        fi
        
        if [ "${{ needs.check-projects.outputs.delivery_exists }}" == "true" ]; then
          echo "🚚 Delivery App:"
          cd GroceryDelivery  
          ./gradlew ktlintCheck --continue || DELIVERY_FAILED=1
          cd ..
        fi
        
        if [[ $CUSTOMER_FAILED == 1 || $ADMIN_FAILED == 1 || $DELIVERY_FAILED == 1 ]]; then
          echo "❌ Code formatting issues found"
          echo "💡 Run './gradlew ktlintFormat' to auto-fix formatting issues"
          exit 1
        else
          echo "✅ All available apps passed formatting checks"
        fi

  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: check-projects
    if: needs.check-projects.outputs.any_project_exists == 'true'
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permissions
      run: find . -name "gradlew" -exec chmod +x {} \;
      
    - name: Run detekt static analysis
      run: |
        echo "🔍 Running detekt static analysis..."
        
        if [ "${{ needs.check-projects.outputs.customer_exists }}" == "true" ]; then
          echo "📱 Customer App Analysis:"
          cd GroceryCustomer && ./gradlew detekt --continue && cd ..
        fi
        
        if [ "${{ needs.check-projects.outputs.admin_exists }}" == "true" ]; then
          echo "👨‍💼 Admin App Analysis:"
          cd GroceryAdmin && ./gradlew detekt --continue && cd ..
        fi
        
        if [ "${{ needs.check-projects.outputs.delivery_exists }}" == "true" ]; then
          echo "🚚 Delivery App Analysis:"
          cd GroceryDelivery && ./gradlew detekt --continue && cd ..
        fi
        
        echo "✅ Static analysis completed"
        
    - name: Upload detekt reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: detekt-reports
        path: |
          **/build/reports/detekt/
        retention-days: 30

  code-duplication:
    name: Code Duplication Analysis
    runs-on: ubuntu-latest
    needs: check-projects
    if: needs.check-projects.outputs.any_project_exists == 'true'
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Install PMD/CPD
      run: |
        wget -q https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.55.0/pmd-bin-6.55.0.zip
        unzip -q pmd-bin-6.55.0.zip
        echo "$(pwd)/pmd-bin-6.55.0/bin" >> $GITHUB_PATH
        
    - name: Run code duplication analysis
      run: |
        echo "🔍 Running code duplication analysis..."
        
        if [ "${{ needs.check-projects.outputs.customer_exists }}" == "true" ]; then
          echo "📱 Analyzing Customer App..."
          pmd cpd --minimum-tokens 50 --language kotlin --dir GroceryCustomer/app/src --format text || true
        fi
        
        if [ "${{ needs.check-projects.outputs.admin_exists }}" == "true" ]; then
          echo "👨‍💼 Analyzing Admin App..."
          pmd cpd --minimum-tokens 50 --language kotlin --dir GroceryAdmin/app/src --format text || true
        fi
        
        if [ "${{ needs.check-projects.outputs.delivery_exists }}" == "true" ]; then
          echo "🚚 Analyzing Delivery App..."
          pmd cpd --minimum-tokens 50 --language kotlin --dir GroceryDelivery/app/src --format text || true
        fi
        
        echo "✅ Code duplication analysis completed"

  skip-notice:
    name: Skip Notice
    runs-on: ubuntu-latest
    needs: check-projects
    if: needs.check-projects.outputs.any_project_exists == 'false'
    
    steps:
    - name: No Projects Found Notice
      run: |
        echo "ℹ️ Code Quality & Performance workflow skipped"
        echo "No Android projects found - this is expected during initial setup."
        echo "Quality checks will run once Android projects are added to the repository."

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [check-projects, code-formatting, static-analysis, code-duplication]
    if: always()
    
    steps:
    - name: Quality Report Summary
      run: |
        echo "📋 Code Quality Summary"
        echo "======================"
        
        if [ "${{ needs.check-projects.outputs.any_project_exists }}" == "true" ]; then
          echo "🎨 Code Formatting: ${{ needs.code-formatting.result }}"
          echo "🔍 Static Analysis: ${{ needs.static-analysis.result }}"
          echo "📊 Code Duplication: ${{ needs.code-duplication.result }}"
          echo "======================"
          
          if [[ "${{ needs.code-formatting.result }}" == "success" && 
                "${{ needs.static-analysis.result }}" == "success" && 
                "${{ needs.code-duplication.result }}" == "success" ]]; then
            echo "✅ All quality checks passed!"
          else
            echo "⚠️ Some quality checks need attention"
          fi
        else
          echo "ℹ️ No Android projects found - quality checks skipped"
          echo "This is expected during initial project setup phase."
        fi