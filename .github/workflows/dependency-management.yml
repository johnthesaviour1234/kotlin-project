name: Dependency Management & Security

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
  push:
    paths:
      - '**/build.gradle.kts'
      - '**/gradle.properties'
      - '**/gradle-wrapper.properties'

jobs:
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permissions
      run: find . -name "gradlew" -exec chmod +x {} \;
      
    - name: Run OWASP Dependency Check - Customer App
      run: |
        echo "🔍 Scanning GroceryCustomer dependencies..."
        cd GroceryCustomer
        ./gradlew dependencyCheckAnalyze --info
      continue-on-error: true
      
    - name: Run OWASP Dependency Check - Admin App  
      run: |
        echo "🔍 Scanning GroceryAdmin dependencies..."
        cd GroceryAdmin
        ./gradlew dependencyCheckAnalyze --info
      continue-on-error: true
      
    - name: Run OWASP Dependency Check - Delivery App
      run: |
        echo "🔍 Scanning GroceryDelivery dependencies..."
        cd GroceryDelivery
        ./gradlew dependencyCheckAnalyze --info
      continue-on-error: true
      
    - name: Upload Vulnerability Reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-reports
        path: |
          **/build/reports/dependency-check-report.html
          **/build/reports/dependency-check-report.xml
        retention-days: 90
        
    - name: Comment on PR with Vulnerabilities
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## 🔒 Dependency Security Scan Results\n\n';
          
          // Check for vulnerability reports
          const apps = ['GroceryCustomer', 'GroceryAdmin', 'GroceryDelivery'];
          let hasVulnerabilities = false;
          
          apps.forEach(app => {
            const reportPath = `${app}/build/reports/dependency-check-report.html`;
            if (fs.existsSync(reportPath)) {
              comment += `### ${app}\n`;
              comment += `📊 Report generated - please review manually\n\n`;
              hasVulnerabilities = true;
            }
          });
          
          if (!hasVulnerabilities) {
            comment += '✅ No vulnerability reports generated - all dependencies appear secure.\n';
          } else {
            comment += '⚠️ Vulnerability reports found - please review the artifacts for details.\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  outdated-dependencies:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permissions
      run: find . -name "gradlew" -exec chmod +x {} \;
      
    - name: Check for outdated dependencies
      run: |
        echo "📋 Checking for outdated dependencies across all apps..."
        
        echo "🔍 Customer App Dependencies:"
        cd GroceryCustomer
        ./gradlew dependencyUpdates
        cd ..
        
        echo "🔍 Admin App Dependencies:"
        cd GroceryAdmin  
        ./gradlew dependencyUpdates
        cd ..
        
        echo "🔍 Delivery App Dependencies:"
        cd GroceryDelivery
        ./gradlew dependencyUpdates
        cd ..
        
        echo "✅ Dependency check completed"
      
    - name: Upload Dependency Reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-updates-reports
        path: |
          **/build/dependencyUpdates/
        retention-days: 30

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permissions
      run: find . -name "gradlew" -exec chmod +x {} \;
      
    - name: Generate License Reports
      run: |
        echo "📄 Generating license reports..."
        
        cd GroceryCustomer
        ./gradlew generateLicenseReport || echo "License plugin not configured for Customer app"
        cd ..
        
        cd GroceryAdmin
        ./gradlew generateLicenseReport || echo "License plugin not configured for Admin app"
        cd ..
        
        cd GroceryDelivery
        ./gradlew generateLicenseReport || echo "License plugin not configured for Delivery app"
        cd ..
        
        echo "✅ License check completed"
      
    - name: Upload License Reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          **/build/reports/licenses/
        retention-days: 90

  gradle-wrapper-validation:
    name: Validate Gradle Wrappers
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Gradle Wrapper - Customer App
      uses: gradle/wrapper-validation-action@v1
      with:
        gradle-wrapper-path: GroceryCustomer/gradle/wrapper/gradle-wrapper.properties
        
    - name: Validate Gradle Wrapper - Admin App
      uses: gradle/wrapper-validation-action@v1  
      with:
        gradle-wrapper-path: GroceryAdmin/gradle/wrapper/gradle-wrapper.properties
        
    - name: Validate Gradle Wrapper - Delivery App
      uses: gradle/wrapper-validation-action@v1
      with:
        gradle-wrapper-path: GroceryDelivery/gradle/wrapper/gradle-wrapper.properties

  create-security-issue:
    name: Create Security Issue
    runs-on: ubuntu-latest
    needs: [dependency-check, license-check]
    if: failure()
    timeout-minutes: 5
    
    steps:
    - name: Create Security Issue
      uses: actions/github-script@v7
      with:
        script: |
          const title = `🔒 Security Alert: Dependency vulnerabilities found - ${new Date().toISOString().split('T')[0]}`;
          const body = `## 🚨 Security Alert
          
          Automated security scan has detected potential vulnerabilities in project dependencies.
          
          ### 📋 Action Required
          - [ ] Review dependency vulnerability reports in workflow artifacts
          - [ ] Update vulnerable dependencies to secure versions
          - [ ] Test applications after dependency updates
          - [ ] Verify no breaking changes introduced
          
          ### 🔍 Affected Areas
          - Customer App dependencies
          - Admin App dependencies  
          - Delivery App dependencies
          
          ### 📊 Reports
          Check the workflow artifacts for detailed vulnerability reports.
          
          ### 👥 Assignees
          @${context.repo.owner}
          
          ---
          **Automated by:** \`dependency-management.yml\` workflow
          **Workflow Run:** ${context.runId}
          **Triggered:** ${context.eventName}`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'dependencies', 'high-priority']
          });

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-check, outdated-dependencies, license-check, gradle-wrapper-validation]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: Security Summary Report
      run: |
        echo "🔒 Security & Dependency Management Summary"
        echo "==========================================="
        echo "🔍 Dependency Vulnerabilities: ${{ needs.dependency-check.result }}"
        echo "📋 Outdated Dependencies: ${{ needs.outdated-dependencies.result }}"  
        echo "📄 License Compliance: ${{ needs.license-check.result }}"
        echo "🔧 Gradle Wrapper Validation: ${{ needs.gradle-wrapper-validation.result }}"
        echo "==========================================="
        
        if [[ "${{ needs.dependency-check.result }}" == "success" && 
              "${{ needs.license-check.result }}" == "success" && 
              "${{ needs.gradle-wrapper-validation.result }}" == "success" ]]; then
          echo "✅ All security checks passed!"
          echo "📊 Recommendation: Review outdated dependencies for potential updates"
        else
          echo "⚠️ Security issues detected - please review reports"
          echo "🚨 Immediate action may be required for security vulnerabilities"
        fi