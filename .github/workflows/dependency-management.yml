name: Dependency Management & Security

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
  push:
    paths:
      - '**/build.gradle.kts'
      - '**/gradle.properties'
      - '**/gradle-wrapper.properties'

jobs:
  check-projects:
    name: Check Android Projects
    runs-on: ubuntu-latest
    outputs:
      customer_exists: ${{ steps.check.outputs.customer_exists }}
      admin_exists: ${{ steps.check.outputs.admin_exists }}
      delivery_exists: ${{ steps.check.outputs.delivery_exists }}
      any_project_exists: ${{ steps.check.outputs.any_project_exists }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for Android project directories
      id: check
      run: |
        customer_exists="false"
        admin_exists="false"
        delivery_exists="false"
        any_project_exists="false"
        
        if [ -d "GroceryCustomer" ] && [ -f "GroceryCustomer/gradlew" ]; then
          customer_exists="true"
          any_project_exists="true"
        fi
        if [ -d "GroceryAdmin" ] && [ -f "GroceryAdmin/gradlew" ]; then
          admin_exists="true"
          any_project_exists="true"
        fi
        if [ -d "GroceryDelivery" ] && [ -f "GroceryDelivery/gradlew" ]; then
          delivery_exists="true"
          any_project_exists="true"
        fi
        
        echo "customer_exists=$customer_exists" >> $GITHUB_OUTPUT
        echo "admin_exists=$admin_exists" >> $GITHUB_OUTPUT
        echo "delivery_exists=$delivery_exists" >> $GITHUB_OUTPUT
        echo "any_project_exists=$any_project_exists" >> $GITHUB_OUTPUT

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    needs: check-projects
    if: needs.check-projects.outputs.any_project_exists == 'true'
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permissions
      run: find . -name "gradlew" -exec chmod +x {} \;
      
    - name: Run OWASP Dependency Check
      run: |
        echo "🔍 Running OWASP dependency vulnerability scan..."
        
        if [ "${{ needs.check-projects.outputs.customer_exists }}" == "true" ]; then
          echo "📱 Scanning GroceryCustomer dependencies..."
          cd GroceryCustomer && ./gradlew dependencyCheckAnalyze --info && cd ..
        fi
        
        if [ "${{ needs.check-projects.outputs.admin_exists }}" == "true" ]; then
          echo "👨‍💼 Scanning GroceryAdmin dependencies..."
          cd GroceryAdmin && ./gradlew dependencyCheckAnalyze --info && cd ..
        fi
        
        if [ "${{ needs.check-projects.outputs.delivery_exists }}" == "true" ]; then
          echo "🚚 Scanning GroceryDelivery dependencies..."
          cd GroceryDelivery && ./gradlew dependencyCheckAnalyze --info && cd ..
        fi
        
        echo "✅ Dependency vulnerability scan completed"
      continue-on-error: true
      
    - name: Upload Vulnerability Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-reports
        path: |
          **/build/reports/dependency-check-report.html
          **/build/reports/dependency-check-report.xml
        retention-days: 90

  outdated-dependencies:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    needs: check-projects
    if: needs.check-projects.outputs.any_project_exists == 'true'
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permissions
      run: find . -name "gradlew" -exec chmod +x {} \;
      
    - name: Check for outdated dependencies
      run: |
        echo "📋 Checking for outdated dependencies..."
        
        if [ "${{ needs.check-projects.outputs.customer_exists }}" == "true" ]; then
          echo "📱 Customer App Dependencies:"
          cd GroceryCustomer && ./gradlew dependencyUpdates && cd ..
        fi
        
        if [ "${{ needs.check-projects.outputs.admin_exists }}" == "true" ]; then
          echo "👨‍💼 Admin App Dependencies:"
          cd GroceryAdmin && ./gradlew dependencyUpdates && cd ..
        fi
        
        if [ "${{ needs.check-projects.outputs.delivery_exists }}" == "true" ]; then
          echo "🚚 Delivery App Dependencies:"
          cd GroceryDelivery && ./gradlew dependencyUpdates && cd ..
        fi
        
        echo "✅ Outdated dependency check completed"
      continue-on-error: true
      
    - name: Upload Dependency Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-updates-reports
        path: |
          **/build/dependencyUpdates/
        retention-days: 30

  gradle-wrapper-validation:
    name: Validate Gradle Wrappers
    runs-on: ubuntu-latest
    needs: check-projects
    if: needs.check-projects.outputs.any_project_exists == 'true'
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v2

  skip-notice:
    name: Skip Notice
    runs-on: ubuntu-latest
    needs: check-projects
    if: needs.check-projects.outputs.any_project_exists == 'false'
    
    steps:
    - name: No Projects Found Notice
      run: |
        echo "ℹ️ Dependency Management & Security workflow skipped"
        echo "No Android projects found - this is expected during initial setup."
        echo "Dependency scanning will run once Android projects are added to the repository."

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [check-projects, dependency-check, outdated-dependencies, gradle-wrapper-validation]
    if: always()
    
    steps:
    - name: Security Report Summary
      run: |
        echo "🔒 Security & Dependency Summary"
        echo "================================"
        
        if [ "${{ needs.check-projects.outputs.any_project_exists }}" == "true" ]; then
          echo "🔍 Vulnerability Scan: ${{ needs.dependency-check.result }}"
          echo "📋 Outdated Check: ${{ needs.outdated-dependencies.result }}"
          echo "🔧 Gradle Validation: ${{ needs.gradle-wrapper-validation.result }}"
          echo "================================"
          
          if [[ "${{ needs.dependency-check.result }}" == "success" && 
                "${{ needs.outdated-dependencies.result }}" == "success" && 
                "${{ needs.gradle-wrapper-validation.result }}" == "success" ]]; then
            echo "✅ All security checks passed!"
          else
            echo "⚠️ Some security checks need attention - please review reports"
          fi
        else
          echo "ℹ️ No Android projects found - security checks skipped"
          echo "This is expected during initial project setup phase."
        fi